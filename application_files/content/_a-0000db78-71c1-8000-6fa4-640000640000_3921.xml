<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<contentHaul xmlns:a="http://www.appian.com/ae/types/2009">
    <rule>
        <name>parseRspQuery</name>
        <uuid>_a-0000db78-71c1-8000-6fa4-640000640000_3921</uuid>
        <description></description>
        <parentUuid>_a-0000d90d-bd40-8000-b6d8-010000010000_1594</parentUuid>
        <visibility>
            <advertise>false</advertise>
            <hierarchy>true</hierarchy>
            <indexable>true</indexable>
            <quota>false</quota>
            <searchable>true</searchable>
            <system>false</system>
            <unlogged>false</unlogged>
        </visibility>
        <definition>with(&#xD;
  /* &#xD;
    Gets the first CDT containing one or more of the following:&#xD;
    Logical Expression, Query Filter, Search Query. It is called&#xD;
    a logicalExpression|filter|search -- abbreviated as LFS&#xD;
  */&#xD;
  local!parentLFS: index(ri!rspQuery, &quot;logicalExpression|filter|search&quot;, null),&#xD;
  /* Check to see if the above CDT has a nested LFS in it */&#xD;
  local!childLFS: index(local!parentLFS, &quot;logicalExpression|filter|search&quot;, null),&#xD;
  /* Get the LFS containing the filter(s) and/or search */&#xD;
  local!mainLFS: if(isnull(local!childLFS), local!parentLFS, local!childLFS),&#xD;
  /* Gets runtime types of LFS (type!QueryFilter or type!Search) */&#xD;
  local!types: apply(fn!runtimetypeof, {local!mainLFS}),&#xD;
  /* Gets the search CDT, if there is one. */&#xD;
  local!searchCdt: index({local!mainLFS}, where(local!types='type!{http://www.appian.com/ae/types/2009}Search'), null),&#xD;
  /* Gets filter CDTs if there are any */&#xD;
  local!filterCdts: index({local!mainLFS}, where(local!types='type!{http://www.appian.com/ae/types/2009}QueryFilter'), {}),&#xD;
  /* Gets paging info */&#xD;
  local!paging: index(ri!rspQuery, &quot;pagingInfo&quot;, topaginginfo(1,100)),&#xD;
  /* &#xD;
    Creates and returns a Dictionary containing the pagingInfo, search text, and filters &#xD;
      currently applied to the list view&#xD;
  */&#xD;
  {&#xD;
    pagingInfo: local!paging,&#xD;
    searchText: tostring(&#xD;
      index(&#xD;
        cast('type!{http://www.appian.com/ae/types/2009}Search',local!searchCdt), &#xD;
        &quot;searchQuery&quot;, &#xD;
        &quot;&quot;&#xD;
      )&#xD;
    ),&#xD;
    filters: cast('type!{http://www.appian.com/ae/types/2009}QueryFilter?list', local!filterCdts)&#xD;
  }&#xD;
)</definition>
        <namedTypedValue>
            <name>rspQuery</name>
            <type>
                <name>Variant</name>
                <namespace>http://www.appian.com/ae/types/2009</namespace>
            </type>
        </namedTypedValue>
        <preferredEditor>legacy</preferredEditor>
        <offlineEnabled>false</offlineEnabled>
    </rule>
    <roleMap public="true">
        <role allowForAll="false" inherit="true" name="readers">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="authors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="true" name="administrators">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyReaders">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAuthors">
            <users/>
            <groups/>
        </role>
        <role allowForAll="false" inherit="false" name="denyAdministrators">
            <users/>
            <groups/>
        </role>
    </roleMap>
    <typedValue>
        <type>
            <name>RuleTestConfig?list</name>
            <namespace>http://www.appian.com/ae/types/2009</namespace>
        </type>
        <value>
            <el>
                <a:name/>
                <a:ruleInputTestConfigs>
                    <a:value xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xsd:string"/>
                    <a:nameRef>rspQuery</a:nameRef>
                    <a:id/>
                </a:ruleInputTestConfigs>
                <a:assertions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true"/>
            </el>
        </value>
    </typedValue>
</contentHaul>
