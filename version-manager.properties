## All parameters can be set here or passed in as command-line arguments

### Environment-specific properties

## REQUIRED. Type of repository (GIT or SVN). SVN functionality is deprecated.
versionControlType=GIT

## REQUIRED. Username of the version control account
vcUsername=wrhagen93

## REQUIRED. Password of the version control account
vcPassword=FredErick09?!

## REQUIRED. URL to access the remote repository
repoUrl=https://github.com/wrhagen93/adm-test.git

## REQUIRED. Path to the folder containing the local repository
localRepoPath=C:\\ADM\\repo

## Branch name of the repository to check out and commit to. Default is master.
#branchName=branch123

## Path to the folder containing the Appian objects in the repository. This path is relative to the path of the local repository. If not specified, the Appian objects are checked out to and commited from the root of the local repository path.
#appianObjectsRepoPath=appian\\flows



### Action-specific properties

## REQUIRED. Valid choices are addContents, buildAllApps, buildSingleApp, or updateLocalRepo
action=addContents

## Message that will be associated with the commit. Used for the addContents action. If no message is specified, the default message is "Committed by @username"
commitMessage="First commit to the repo"

## Path for the application ZIP file to add to version control. Used for the addContents action.
applicationPath=C:\\ADM\\Application.zip

## UUID of the Appian application
## Used for addContents action.  Indicates the app to which the contents of the Appian patch will be added. This does not need to be set for a package containing multiple patches.
## Used for the buildAllApps, buildSingleApp, and buildMultipleApps actions. Indicates the app(s) to be extracted from the repository.
#uuid=

## Name of the Appian application
## Used for addContents action.  Indicates the app to which the contents of the Appian patch will be added. This does not need to be set for a package containing multiple patches.
## Used for the buildAllApps, buildSingleApp, and buildMultipleApps actions. Indicates the app(s) to be extracted from the repository.
#application_name=""

## List of comma-separated paths for the DDL files to execute. Used for the addContents action.
#ddlPath=C:\\ADM\\DDL.sql
#,C:\\ADM\\DDLs\\someSQL.sql

## List of comma-separated paths for the directories to execute DB migrations via Flyway. Used for the addContents action.
#flywayPath=C:\\ADM\\Flyway
#,C:\\Users\\acme.corp\\Documents\\db\\migration2

## List of comma-separated datasources associated with the provided DDL files. Used for the addContents action. Required if using ddlPath or flywayPath.
#ddlDs=jdbc/AppianAnywhere
#,jdbc/businessds2

## Path for the admin console ZIP file to add to version control. Used for the addContents action.
#adminConsolePath=C:\\ADM\\ACSettings.zip

## REQUIRED for the buildAllApps and buildSingleApp actions. Path and name of the generated package ZIP file.
#packagePath=C:\\ADM\\outputPackage.zip

## Start hash of the commit you want to start building the package. If not populated, everything in the local repository will be included up to the end commit (if specified). Used for the buildAllApps and buildSingleApp actions.
#startHash=

## End hash of the commit you want to start building the package. If not populated, will get all files to the latest commit. Used for the buildAllApps and buildSingleApp actions.
#endHash=

## Optional. A boolean flag to skip repository update and checkout. Used for the buildAllApps and buildSingleApp actions.
#noUpdate=true

## Optional. A boolean flag to enable custom commit message prompts in the folder listener tool.
#enableFolderListenerCommitMessage=true
